//
//  EnergyFlowViewPresentable.swift
//  SenecUI_iOS
//
//  Created by André Rohrbeck on 26.12.18.
//  Copyright © 2018 André Rohrbeck. All rights reserved.
//

import Foundation


/// The View Model for an EnergyFlowView.
///
/// - Author: André Rohrbeck
/// - Copyright: André Rohrbeck © 2018
/// - Date: 2018-12-26
public protocol EnergyFlowViewPresentable: BatteryViewPresentable {
    /// The maximum power in Watt, to which all other power values get normalized to.
    ///
    /// The `EnergyFlowView` represents the energy flow by using arrows, whichs line
    /// width is scaled according to the flowing power.
    /// The maximum power should be either scaled according to the maximum expectable
    /// house consumption or to the maximum photovoltaic output.
    var maxValue: Double { get }


    /// The power flowing from the photovoltaic system to the battery in Watt.
    var photovoltaicToBatteryValue: Double { get }

    /// The power flowing from the photovoltaic system into the gridd in Watt.
    var photovoltaicToGridValue: Double { get }

    /// The power flowing from the photovoltaic system into the house consumption in Watt.
    var photovoltaicToHouseValue: Double { get }

    /// The power flowing from the battery into the grid (or vice versa if negative) in Watt.
    var batteryToGridValue: Double { get }

    /// The power flowing from the battery into the house consumption in Watt.
    var batteryToHouseValue: Double { get }

    /// The power flowing from the grid into the house consumption in Watt.
    var gridToHouseValue: Double { get }


    /// The unit of all the `...Value` values.
    var unit: String { get }
}



extension EnergyFlowViewPresentable {

    /// The power currently generated by the photovoltaic system in Watt.
    public var photovoltaicPowerGeneration: Double {
        return photovoltaicToHouseValue + photovoltaicToBatteryValue + photovoltaicToGridValue
    }



    /// The currently consumed power in Watt.
    public var houseConsumption: Double {
        return photovoltaicToHouseValue + batteryToHouseValue + gridToHouseValue
    }
}
